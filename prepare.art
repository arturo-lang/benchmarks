KeepOnly: []
if positive? size arg [
    KeepOnly: split.by:"," arg\0
]
canExecute?: function [scri][
    scr: extract.filename scri
    if positive? size KeepOnly [
        loop KeepOnly 'ko [
            if contains? scr ko -> return true
        ]
        return false
    ]

    if sys\release='mini [
        if in? scr [
            "runtime.NumberOutOfPermittedRange"

            "branching"
            "sorting"

            "ackermann function"
            "arbitrary-precision integers - included"
            "curzon numbers"
            "iban"
            "integer overflow"
            "integer roots"
            "jacobsthal numbers"
            "long multiplication"
            "loops - continue"
            "lucas-lehmer test"
            "modular exponentation"
            "next special primes"
            "sorting algorithms - cycle sort"
            "sorting algorithms - pancake sort"
            "sylvester's sequence"
            "trigonometric functions"
            "ultra useful primes"
            "unicode strings"
            "wieferich primes"
            "xml - input"
        ] -> return false
    ]

    if sys\release='full [
        if in? scr [
            "runtime.IntegerOperationOverflow"
            "runtime.IntegerParsingOverflow"
        ] -> return false
    ]

    return true
]

getMicroList: function [location][
    join.with:" " map select list location 'loc [
        canExecute? loc
    ] 'item [
        ii: item
        ii: replace ii "'" {\'}
        ii: replace ii " " {:\ :}
        ii: replace ii "(" {:\(:}
        ii: replace ii ")" {:\):}
        ~{"arturo |ii|"}
    ]
]

getMacroList: function [location][
    join.with:" " map select sort select list relative location 'loc -> contains? loc ".res" 'll [
        canExecute? replace ll ".res" ".art"
    ] 'item [
        ii: replace item ".res" ".art"
        ii: replace ii "'" {\'}
        ii: replace ii " " {:\ :}
        ii: replace ii "(" {:\(:}
        ii: replace ii ")" {:\):}
        ~{"arturo |ii|"}
    ]
]

prepareCommand: function [str, what][
    "#!/usr/bin/env bash\n\n" ++
    "hyperfine " ++ 
        ;"--warmup 1 " ++
        "--time-unit millisecond " ++
        "--max-runs $1 " ++
        "--ignore-failure " ++
        (~"--export-json |what|.json ") ++
        (~"--export-markdown |what|.md ") ++ 
        ;((sys\os="linux")? ->"--prepare 'sync; echo 3 | sudo tee /proc/sys/vm/drop_caches'" ->"") ++ " " ++
        str
]

micro: prepareCommand (getMicroList "tests/parsing") ++ " " ++
                      (getMicroList "tests/core") ++ " " ++ 
                      join.with:" " map sort filter list "tests/library" 'l [contains? l "."] => getMicroList
                    ;   (getMicroList "tests/library/collections") ++ " " ++ 
                    ;   (getMicroList "tests/library/comparison") ++ " " ++ 
                    ;   (getMicroList "tests/library/converters") ++ " " ++ 
                    ;   (getMicroList "tests/library/crypto") ++ " " ++ 
                    ;   (getMicroList "tests/library/iterators") ++ " " ++ 
                    ;   (getMicroList "tests/library/numbers")
                      'micro
macro: prepareCommand (getMacroList "../arturo/tests/unittests") ++ " " ++
                      (getMacroList "../arturo/examples/rosetta") 
                      'macro

write "micro.cmd" micro
write "macro.cmd" macro